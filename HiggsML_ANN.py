# -*- coding: utf-8 -*-
"""HiggsML_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AyiwmlVcWQ69w4BX16TAqcMxUwYHW8by
"""

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd 
df=pd.read_csv('gdrive/My Drive/BE(CSE)/Mega Project!/Dataset/ATLAS Collaboration CERN Dataset.csv')

#Importing Dependencies

import numpy as np
#import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import Imputer, StandardScaler

from time import time

# %matplotlib inline

# Read data from the CSV into a dataframe

#loc = "G:/Z - Priority/Z - Mega Project/Python Code and Dataset/"
#df = pd.read_csv(loc + 'ATLAS Collaboration CERN Dataset.csv')

# Display first 5 rows
df.head()

#Train set

train = df[:250000]

train.tail()

#Test set

test = df[250000:]
test = test.drop(['Weight', 'Label'], axis = 1)

test.head()

#Checking the Missing Values in the train set & test set

cnt1 = train.isnull().sum().sum()
cnt2 = test.isnull().sum().sum()

print(cnt1+cnt2)

X = train.drop(['EventId','Label','Weight'],1)
y = train['Label']

X.head()

#Filling in -999.00(Marker for empty feilds) values with median of the rest of the data in the column

imp = Imputer(missing_values=-999.00, strategy='median')
cols = X.columns
X = pd.DataFrame(imp.fit_transform(X), columns=cols)
X.describe()

#Some features still have a high deviation. Hence scaling all the features

scaler = StandardScaler()
cols = X.columns
X = pd.DataFrame(scaler.fit_transform(X), columns=cols)
X.describe()

"""# Visualization"""

#Count Plot

#y = train['Label']
sns.countplot(y)
print("Percentage of 's' : ",float((sum(y=='s'))/len(y))*100)

sns.boxplot(y = X['DER_mass_MMC'])

"""# Validation"""

# Shuffle and split the dataset into training and testing set.

#from sklearn.cross_validation import train_test_split
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                                    test_size = 0.20,
                                                    random_state = 42,
                                                    stratify = y)

"""#Model Building and Prediction"""

#!pip install tensorflow-gpu

import tensorflow as tf
print(tf.__version__)

device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found!')
print('Found GPU at: {}'.format(device_name))

from keras.models import Sequential
from keras.layers import Dense

classifier = Sequential() #Initialising the ANN

classifier.add(Dense(units = 16, activation = 'relu', input_dim = 30))
classifier.add(Dense(units = 8, activation = 'relu'))
classifier.add(Dense(units = 6, activation = 'relu'))
classifier.add(Dense(units = 1, activation = 'sigmoid'))

classifier.compile(optimizer = 'nadam', loss = 'binary_crossentropy')

def categ(string):
    if string == 'b':
        return 0
    else:
        return 1
    
y_train = y_train.apply(categ)
y_test = y_test.apply(categ)

y_train.head()

y_test.head()

classifier.fit(X_train, y_train, batch_size = 256, epochs = 20)

start = time()

y_pred = classifier.predict(X_train)
y_pred = [ 1 if y>=0.5 else 0 for y in y_pred]

end = time()
tr_time = end - start

start = time()

y_pred_2 = classifier.predict(X_test)
y_pred_2 = [ 1 if y>=0.5 else 0 for y in y_pred_2]

end = time()
ts_time = end - start

#Import f1_score and accuracy_score from sklearn.metrics

from sklearn.metrics import f1_score, accuracy_score

train_f1_scr = f1_score(y_train , y_pred, pos_label =1)
train_acc = accuracy_score(y_train , y_pred)

print ("Made predictions in {:.4f} seconds.".format(tr_time))
print ("F1 score and accuracy score for training set: {:.4f} , {:.4f}.".format(train_f1_scr , train_acc))

test_f1_scr = f1_score(y_test, y_pred_2, pos_label =1)
test_acc = accuracy_score(y_test , y_pred_2)

print ("Made predictions in {:.4f} seconds.".format(ts_time))
print ("F1 score and accuracy score for test set: {:.4f} , {:.4f}.".format(test_f1_scr , test_acc))

#import matplotlib.pyplot as plt

def gplot(c1,c2):
    # Data to plot
    labels = 'Signal', 'Background'
    sizes = [c1, c2]
    colors = ['gold', 'lightskyblue']
    explode = (0.1, 0)  # explode 1st slice
 
    # Plot
    plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140) 
    plt.axis('equal')
    plt.show()

c1 = 0
c2 = 0

for i in range(0,len(y_pred)):
        if(y_pred[i] == 1):
            c1 = c1 + 1
        else:
            c2 = c2 + 1
gplot(c1,c2)

c1 = 0
c2 = 0

for i in range(0,len(y_pred_2)):
        if(y_pred_2[i] == 1):
            c1 = c1 + 1
        else:
            c2 = c2 + 1
gplot(c1,c2)

